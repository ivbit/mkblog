

GNU m4 uses only a subset of GNU Emacs' regular expressions:
Special characters are $^.*+?[\
Character ] is special if it ends a character set
Character - is special inside a character set
.       any single character except a newline.
*       0 or more
+       1 or more
?       0 or 1
[ ]     character set, classes like [:alnum:] are not supported
[^ ]    not in character set
^       beginning of the line
$       end of a line
\       escape character
\|      alternative, foo\|bar, \(foo\|bar\)
\( \)   group, \( \)?, \( \)*, \( \)+
\1 \9   back reference
\&      whole match, use instead of deprecated \0
\`      beginning of the string or buffer
\'      end of the string or buffer
\b      beginning or end of word, \bSOMETHING\b
\B      inside word, so\Bme\Bthing
\<      beginning of word
\>      end of word
\w      word-constituent character
\W      any character that is not word-constituent

regexp(`06/19/2022', `\([0-9]+\)[^0-9]\([0-9]+\)[^0-9]\([0-9]+\)', `\2.\1.\3 \3-\1-\2')
19.06.2022 2022-06-19

GNU m4 uses only a subset of C programming language's format specifiers:
Backslash escapes, such as \n, \t are not supported
%c      a single character, format(`%c', `65')
%s      a string
%d      a decimal integer (assumes base 10), format(`%09d', `44')
%i      a decimal integer (detects the base automatically)
%hi %hd short (signed)
%li %ld long (signed)
%u      int unsigned decimal
%hu     short (unsigned)
%lu     long (unsigned)
%o      an octal (base 8) integer
%x %X   a hexadecimal (base 16) integer
%f %F   a floating point number for floats, format(`%.2f', `7.928344586')
%lf %lF long double
%e %E   a floating point number in scientific notation, format(`%.3e', `987.92834')
%%      the % symbol

